pragma circom 2.1.2;

include "circomlib/circuits/comparators.circom";
include "circomlib/circuits/gates.circom";
include "./operators/langmatches.circom";

template QueryVerifier() {
  signal input triples[3][3][128];
  signal output variables[1][128];
  signal output out;

  out <== 1, OR()(1, 1);
  out === 1;

  // Joins
  triples[0][0] === triples[1][0];
  triples[0][0] === triples[2][0];

  component f0 = GreaterEqThan(32);
  f0.in[0] <== triples[0][2][1];
  f0.in[1] <== 18;
  f0.out === 1;

  component f1 = LessThan(32);
  f1.in[0] <== triples[0][2][1];
  f1.in[1] <== 25;
  f1.out === 1;

  component f2 = IsEqual();
  f2.in[0] <== triples[0][2][1];
  f2.in[1] <== 20;
  f2.out === 0;

  triples[1][2][0] === 0;

  triples[2][2][1] === 101;
  triples[2][2][2] === 110;
  triples[2][2][3] === 0;
  triples[2][2][4] === 0;
  triples[2][2][5] === 0;
  triples[2][2][6] === 0;
  triples[2][2][7] === 0;
  triples[2][2][8] === 0;

  triples[0][2][0] === 5;

  variables[0] <== triples[0][0];

  [0,104,116,116,112,58,47,47,120,109,108,110,115,46,99,111,109,47,102,111,97,102,47,48,46,49,47,97,103,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] === triples[0][1];
  [0,104,116,116,112,58,47,47,120,109,108,110,115,46,99,111,109,47,102,111,97,102,47,48,46,49,47,107,110,111,119,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] === triples[1][1];
  [0,104,116,116,112,58,47,47,120,109,108,110,115,46,99,111,109,47,102,111,97,102,47,48,46,49,47,110,97,109,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] === triples[2][1];

}
